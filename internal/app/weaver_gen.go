// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package app

import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"github.com/renanbastos93/transaction-routine/internal/app/domain"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/renanbastos93/transaction-routine/internal/app/Component",
		Iface: reflect.TypeOf((*Component)(nil)).Elem(),
		Impl:  reflect.TypeOf(implapp{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return component_local_stub{impl: impl.(Component), tracer: tracer, createUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "CreateUser", Remote: false}), getAllOperationsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "GetAllOperations", Remote: false}), getAllUsersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "GetAllUsers", Remote: false}), getUserByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "GetUserById", Remote: false}), saveTransactionMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "SaveTransaction", Remote: false}), thereIsOperationTypByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "ThereIsOperationTypById", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return component_client_stub{stub: stub, createUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "CreateUser", Remote: true}), getAllOperationsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "GetAllOperations", Remote: true}), getAllUsersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "GetAllUsers", Remote: true}), getUserByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "GetUserById", Remote: true}), saveTransactionMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "SaveTransaction", Remote: true}), thereIsOperationTypByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/renanbastos93/transaction-routine/internal/app/Component", Method: "ThereIsOperationTypById", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return component_server_stub{impl: impl.(Component), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return component_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[Component] = (*implapp)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*implapp)(nil)

// Local stub implementations.

type component_local_stub struct {
	impl                           Component
	tracer                         trace.Tracer
	createUserMetrics              *codegen.MethodMetrics
	getAllOperationsMetrics        *codegen.MethodMetrics
	getAllUsersMetrics             *codegen.MethodMetrics
	getUserByIdMetrics             *codegen.MethodMetrics
	saveTransactionMetrics         *codegen.MethodMetrics
	thereIsOperationTypByIdMetrics *codegen.MethodMetrics
}

// Check that component_local_stub implements the Component interface.
var _ Component = (*component_local_stub)(nil)

func (s component_local_stub) CreateUser(ctx context.Context, a0 domain.AccountIn) (err error) {
	// Update metrics.
	begin := s.createUserMetrics.Begin()
	defer func() { s.createUserMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "app.Component.CreateUser", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateUser(ctx, a0)
}

func (s component_local_stub) GetAllOperations(ctx context.Context) (r0 domain.AllOperations, err error) {
	// Update metrics.
	begin := s.getAllOperationsMetrics.Begin()
	defer func() { s.getAllOperationsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "app.Component.GetAllOperations", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetAllOperations(ctx)
}

func (s component_local_stub) GetAllUsers(ctx context.Context) (r0 domain.AllAccounts, err error) {
	// Update metrics.
	begin := s.getAllUsersMetrics.Begin()
	defer func() { s.getAllUsersMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "app.Component.GetAllUsers", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetAllUsers(ctx)
}

func (s component_local_stub) GetUserById(ctx context.Context, a0 string) (r0 domain.AccountOut, err error) {
	// Update metrics.
	begin := s.getUserByIdMetrics.Begin()
	defer func() { s.getUserByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "app.Component.GetUserById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetUserById(ctx, a0)
}

func (s component_local_stub) SaveTransaction(ctx context.Context, a0 domain.TransactionIn) (r0 bool, err error) {
	// Update metrics.
	begin := s.saveTransactionMetrics.Begin()
	defer func() { s.saveTransactionMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "app.Component.SaveTransaction", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.SaveTransaction(ctx, a0)
}

func (s component_local_stub) ThereIsOperationTypById(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	begin := s.thereIsOperationTypByIdMetrics.Begin()
	defer func() { s.thereIsOperationTypByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "app.Component.ThereIsOperationTypById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ThereIsOperationTypById(ctx, a0)
}

// Client stub implementations.

type component_client_stub struct {
	stub                           codegen.Stub
	createUserMetrics              *codegen.MethodMetrics
	getAllOperationsMetrics        *codegen.MethodMetrics
	getAllUsersMetrics             *codegen.MethodMetrics
	getUserByIdMetrics             *codegen.MethodMetrics
	saveTransactionMetrics         *codegen.MethodMetrics
	thereIsOperationTypByIdMetrics *codegen.MethodMetrics
}

// Check that component_client_stub implements the Component interface.
var _ Component = (*component_client_stub)(nil)

func (s component_client_stub) CreateUser(ctx context.Context, a0 domain.AccountIn) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createUserMetrics.Begin()
	defer func() { s.createUserMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "app.Component.CreateUser", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s component_client_stub) GetAllOperations(ctx context.Context) (r0 domain.AllOperations, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getAllOperationsMetrics.Begin()
	defer func() { s.getAllOperationsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "app.Component.GetAllOperations", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 1, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	*(*[]domain.Operation)(&r0) = serviceweaver_dec_slice_Operation_71226fba(dec)
	err = dec.Error()
	return
}

func (s component_client_stub) GetAllUsers(ctx context.Context) (r0 domain.AllAccounts, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getAllUsersMetrics.Begin()
	defer func() { s.getAllUsersMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "app.Component.GetAllUsers", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 2, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	*(*[]domain.AccountOut)(&r0) = serviceweaver_dec_slice_AccountOut_9f1e6c74(dec)
	err = dec.Error()
	return
}

func (s component_client_stub) GetUserById(ctx context.Context, a0 string) (r0 domain.AccountOut, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getUserByIdMetrics.Begin()
	defer func() { s.getUserByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "app.Component.GetUserById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s component_client_stub) SaveTransaction(ctx context.Context, a0 domain.TransactionIn) (r0 bool, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.saveTransactionMetrics.Begin()
	defer func() { s.saveTransactionMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "app.Component.SaveTransaction", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Bool()
	err = dec.Error()
	return
}

func (s component_client_stub) ThereIsOperationTypById(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.thereIsOperationTypByIdMetrics.Begin()
	defer func() { s.thereIsOperationTypByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "app.Component.ThereIsOperationTypById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.21.2 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type component_server_stub struct {
	impl    Component
	addLoad func(key uint64, load float64)
}

// Check that component_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*component_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s component_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "CreateUser":
		return s.createUser
	case "GetAllOperations":
		return s.getAllOperations
	case "GetAllUsers":
		return s.getAllUsers
	case "GetUserById":
		return s.getUserById
	case "SaveTransaction":
		return s.saveTransaction
	case "ThereIsOperationTypById":
		return s.thereIsOperationTypById
	default:
		return nil
	}
}

func (s component_server_stub) createUser(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 domain.AccountIn
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.CreateUser(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s component_server_stub) getAllOperations(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetAllOperations(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Operation_71226fba(enc, ([]domain.Operation)(r0))
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s component_server_stub) getAllUsers(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetAllUsers(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_AccountOut_9f1e6c74(enc, ([]domain.AccountOut)(r0))
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s component_server_stub) getUserById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetUserById(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s component_server_stub) saveTransaction(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 domain.TransactionIn
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.SaveTransaction(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Bool(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s component_server_stub) thereIsOperationTypById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.ThereIsOperationTypById(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type component_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that component_reflect_stub implements the Component interface.
var _ Component = (*component_reflect_stub)(nil)

func (s component_reflect_stub) CreateUser(ctx context.Context, a0 domain.AccountIn) (err error) {
	err = s.caller("CreateUser", ctx, []any{a0}, []any{})
	return
}

func (s component_reflect_stub) GetAllOperations(ctx context.Context) (r0 domain.AllOperations, err error) {
	err = s.caller("GetAllOperations", ctx, []any{}, []any{&r0})
	return
}

func (s component_reflect_stub) GetAllUsers(ctx context.Context) (r0 domain.AllAccounts, err error) {
	err = s.caller("GetAllUsers", ctx, []any{}, []any{&r0})
	return
}

func (s component_reflect_stub) GetUserById(ctx context.Context, a0 string) (r0 domain.AccountOut, err error) {
	err = s.caller("GetUserById", ctx, []any{a0}, []any{&r0})
	return
}

func (s component_reflect_stub) SaveTransaction(ctx context.Context, a0 domain.TransactionIn) (r0 bool, err error) {
	err = s.caller("SaveTransaction", ctx, []any{a0}, []any{&r0})
	return
}

func (s component_reflect_stub) ThereIsOperationTypById(ctx context.Context, a0 string) (err error) {
	err = s.caller("ThereIsOperationTypById", ctx, []any{a0}, []any{})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_Operation_71226fba(enc *codegen.Encoder, arg []domain.Operation) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Operation_71226fba(dec *codegen.Decoder) []domain.Operation {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]domain.Operation, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

func serviceweaver_enc_slice_AccountOut_9f1e6c74(enc *codegen.Encoder, arg []domain.AccountOut) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_AccountOut_9f1e6c74(dec *codegen.Decoder) []domain.AccountOut {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]domain.AccountOut, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
